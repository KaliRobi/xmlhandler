const text = document.getElementById('xml').value;
    console.log(text.match('/<.[^(><.)]+>)/'))
    if(text.match('/(<.[^(><.)]+>)/')){  ///this needs to be chnaged to test for tags
    var xmlDoc = new DOMParser().parseFromString(text, 'application/xml');
     var xsltDoc = new DOMParser().parseFromString([
        // styleing of the xml, tags should be highlighted somehow
        '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
        '  <xsl:strip-space elements="*"/>',
        '  <xsl:template match="para[content-style][not(text())]">', // change to just text() to strip space in text nodes
        '    <xsl:value-of select="normalize-space(.)"/>',
        '  </xsl:template>',
        '  <xsl:template match="node()|@*">',
        '    <xsl:copy><xsl:apply-templates select="node()|@*"/></xsl:copy>',
        '  </xsl:template>',
        '  <xsl:output indent="yes"/>',
        '</xsl:stylesheet>',
    ].join('\n'), 'application/xml');

    var xsltProcessor = new XSLTProcessor();    
    xsltProcessor.importStylesheet(xsltDoc);
    var resultDoc = xsltProcessor.transformToDocument(xmlDoc);
    var resultXml = new XMLSerializer().serializeToString(resultDoc);
   

   
    if(!document.getElementById('xmlout').innerHTML == ""){
       
        document.getElementById('xmlout').innerHTML = " ";
    }

    document.getElementById('xmlout').innerHTML = resultXml;
    }
    document.getElementById('xmlout').innerHTML = "Does not seem to be a complete XML file [test for < /> tags failed]"

};



 function kon(){
    // take the values from the second textbox
    const text = document.getElementById('xmlout').value;
    const xmlNode  =  new DOMParser().parseFromString(text, 'application/xml');
    const firstTagNodelist = xmlNode.querySelectorAll('*')
   
    // console.log(text.match(pat));
    //take the values from the second textbox
    const textB = document.getElementById('xml').value;
    const xmlNodeB  =  new DOMParser().parseFromString(textB, 'application/xml');
    const secondtTagNodelist = xmlNodeB.querySelectorAll('*')
   
    const firstTagArray = Array.from(firstTagNodelist);
    const secondTagArray = Array.from(secondtTagNodelist);
    let diffNotInFirst = firstTagArray.filter(el => !secondTagArray.includes(el));
    let diffNotInsecond = secondTagArray.filter(el => !firstTagArray.includes(el));




<root>  <write>1536854537</write>  <clothing>    <anything>-365013881</anything><greater><alive>-1921360719.73777</alive>
      <vast>with</vast>
      <share>decide</share>
      <alike>wait</alike>
      <board>pony</board>
      <arrow>angle</arrow>
    </greater>
    <mail>968040053.3846254</mail>
    <bottom>271132725.6407275</bottom>
    <group>2098584600</group>
    <task>-1656854956.0936575</task>
  </clothing>
  <cave>page</cave>
  <sharp>1823517927.3793287</sharp>
  <anybody>-1007165639.0820799</anybody>
  <seat>alive</seat>
</root>


    //     <div className=" h-screen bg-gray-300">
    // <div className=' flex flex-row  justify-center'>
       
    //     <div className='basis-1/3 m-6 justify-center'>
    //     <TextArea  xmltext={xmltext}/>
    //     </div>
    //     <div className='basis-1/3 m-6 justify-end'>
    //     <div className="flex justify-center my-10  ">
    //         <form onSubmit={handleclick}>                
    //             <div form-control="true">
    //         <Button name={'>> Style >>'}   />  
    //         </div>  
    //         </form>       
    //            </div>               
    //             <div className="flex justify-center my-10">             
    //         <Button name={'<< Compare >>'} />
    //         </div>
    //         <div className="flex justify-center my-10">             
    //         <Button name={'<< Merge >>'} />
    //         </div>
    //     </div>
    //     <div className='basis-1/3 m-6 justify-center'>
    //     <TextArea />
    //     </div>
        
    // </div>
    // </div>









    #################################

const ttt = (string ) => {
    let arr = []    
    string.split(" ").forEach(ite => arr.push(ite))
    // arr.forEach(it => console.log(it))
    return arr    
    }
    
    let arr1 = ttt(string1)
    
    let arr2 = ttt(string2)

    // ez azt nezi hogy mennyiben egyeznek
    
    const compareFirst = (str, str2) => {
        let  count = 0
        let strLenght = str.length
        let t = str.forEach(it => { str2.includes(it)==true ? count+=1 : count += 0 })
        let num = (count/strLenght).toFixed(2)
        return num
    }
    
    let res = compareFirst(arr1, arr2)
    console.log(res > 0.80)
    // ha a megyezes 80 szazaleknal kisebb akkor ad egy trut
    
    const isItChanged = (res) => {
    
        return res > 0.80 ? false : true
    
    }
    let yy = isItChanged(res)
    
    console.log(yy) 
    console.log((isItChanged(res)== true))
    if((isItChanged(res)== true))(string1 = "empty ")
    console.log(string1)